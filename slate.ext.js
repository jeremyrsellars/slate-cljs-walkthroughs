// Generated via https://jeremyrsellars.github.io/slate-cljs-walkthroughs/closure_externs.html
// from NPM.

// Reference ns as slate or use global js/Slate
/**********************************************************************
 * Extern for global Slate
 * Generated by https://jeremyrsellars.github.io/slate-cljs-walkthroughs/closure_externs.html
 **********************************************************************/
var Slate = {
    "Editor": {
        "above": function() {},
        "addMark": function() {},
        "after": function() {},
        "before": function() {},
        "deleteBackward": function() {},
        "deleteForward": function() {},
        "deleteFragment": function() {},
        "edges": function() {},
        "end": function() {},
        "first": function() {},
        "fragment": function() {},
        "hasBlocks": function() {},
        "hasInlines": function() {},
        "hasTexts": function() {},
        "insertBreak": function() {},
        "insertFragment": function() {},
        "insertNode": function() {},
        "insertText": function() {},
        "isBlock": function() {},
        "isEdge": function() {},
        "isEditor": function() {},
        "isEmpty": function() {},
        "isEnd": function() {},
        "isInline": function() {},
        "isNormalizing": function() {},
        "isStart": function() {},
        "isVoid": function() {},
        "last": function() {},
        "leaf": function() {},
        "levels": function() {},
        "marks": function() {},
        "next": function() {},
        "node": function() {},
        "nodes": function() {},
        "normalize": function() {},
        "parent": function() {},
        "path": function() {},
        "pathRef": function() {},
        "pathRefs": function() {},
        "point": function() {},
        "pointRef": function() {},
        "pointRefs": function() {},
        "positions": function() {},
        "previous": function() {},
        "range": function() {},
        "rangeRef": function() {},
        "rangeRefs": function() {},
        "removeMark": function() {},
        "start": function() {},
        "string": function() {},
        "transform": function() {},
        "unhangRange": function() {},
        "void": function() {},
        "withoutNormalizing": function() {},
    },
    "Element": {
        "isElement": function() {},
        "isElementList": function() {},
        "matches": function() {},
    },
    "Location": {
        "isLocation": function() {},
    },
    "Node": {
        "ancestor": function() {},
        "ancestors": function() {},
        "child": function() {},
        "children": function() {},
        "common": function() {},
        "descendant": function() {},
        "descendants": function() {},
        "elements": function() {},
        "first": function() {},
        "fragment": function() {},
        "get": function() {},
        "has": function() {},
        "isNode": function() {},
        "isNodeList": function() {},
        "last": function() {},
        "leaf": function() {},
        "levels": function() {},
        "matches": function() {},
        "nodes": function() {},
        "parent": function() {},
        "string": function() {},
        "texts": function() {},
    },
    "Operation": {
        "inverse": function() {},
        "isNodeOperation": function() {},
        "isOperation": function() {},
        "isOperationList": function() {},
        "isSelectionOperation": function() {},
        "isTextOperation": function() {},
    },
    "Path": {
        "ancestors": function() {},
        "common": function() {},
        "compare": function() {},
        "endsAfter": function() {},
        "endsAt": function() {},
        "endsBefore": function() {},
        "equals": function() {},
        "isAfter": function() {},
        "isAncestor": function() {},
        "isBefore": function() {},
        "isChild": function() {},
        "isCommon": function() {},
        "isDescendant": function() {},
        "isParent": function() {},
        "isPath": function() {},
        "isSibling": function() {},
        "levels": function() {},
        "next": function() {},
        "parent": function() {},
        "previous": function() {},
        "relative": function() {},
        "transform": function() {},
    },
    "PathRef": {
        "transform": function() {},
    },
    "Point": {
        "compare": function() {},
        "equals": function() {},
        "isAfter": function() {},
        "isBefore": function() {},
        "isPoint": function() {},
        "transform": function() {},
    },
    "PointRef": {
        "transform": function() {},
    },
    "Range": {
        "edges": function() {},
        "end": function() {},
        "equals": function() {},
        "includes": function() {},
        "intersection": function() {},
        "isBackward": function() {},
        "isCollapsed": function() {},
        "isExpanded": function() {},
        "isForward": function() {},
        "isRange": function() {},
        "points": function() {},
        "start": function() {},
        "transform": function() {},
    },
    "RangeRef": {
        "transform": function() {},
    },
    "Span": {
        "isSpan": function() {},
    },
    "Text": {
        "decorations": function() {},
        "equals": function() {},
        "isText": function() {},
        "isTextList": function() {},
        "matches": function() {},
    },
    "Transforms": {
        "collapse": function() {},
        "delete": function() {},
        "deselect": function() {},
        "insertFragment": function() {},
        "insertNodes": function() {},
        "insertText": function() {},
        "liftNodes": function() {},
        "mergeNodes": function() {},
        "move": function() {},
        "moveNodes": function() {},
        "removeNodes": function() {},
        "select": function() {},
        "setNodes": function() {},
        "setPoint": function() {},
        "setSelection": function() {},
        "splitNodes": function() {},
        "transform": function() {},
        "unsetNodes": function() {},
        "unwrapNodes": function() {},
        "wrapNodes": function() {},
    },
    "createEditor": function() {},
};
